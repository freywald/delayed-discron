#!/bin/bash

set -uo pipefail -o noclobber -o nounset
shopt -s inherit_errexit

handle_error() # @source: https://gist.github.com/bkahlert/08f9ec3b8453db5824a0aa3df6a24cb4
{
	local esc_red esc_reset; esc_red=$(tput setaf 1 || true); esc_reset=$(tput sgr0 || true)
	printf "%s %s\n\tin program:\t %s\n\tat location:\t %s\n\tat line:\t %s\n" "${esc_red-}âœ˜${esc_reset-}" "${esc_red-}$(errno "$1" )${esc_reset-}" "${0##*/}"  "$3" "$2" >&2
	exit "$1"
}

#trap 'handle_error "$?" "${BASH_COMMAND:-?}" "${FUNCNAME[0]:-main}(${BASH_SOURCE[0]:-?}:${LINENO:-?})"' ERR

function reset_colors() { # @source: https://github.com/MitMaro/server-rsync-backup
	declare -g C_RESET=''
	declare -g C_LOG_DATE=''
	declare -g C_HIGHLIGHT=''
	declare -g C_INFO=''
	declare -g C_VERBOSE=''
	declare -g C_WARNING=''
	declare -g C_ERROR=''
}

function check_colors() { # @source: https://github.com/MitMaro/server-rsync-backup
	reset_colors

	if [ -x "/usr/bin/tput" ] && tput setaf 1 >&"/dev/null"; then
		C_RESET="\033[0m"
		C_LOG_DATE="\033[0;36m"
		C_HIGHLIGHT="\033[1;34m"
		C_INFO="\033[0;32m"
		C_VERBOSE="\033[0;36m"
		C_WARNING="\033[1;33m"
		C_ERROR="\033[0;31m"
	fi
}

function highlight() { # @source: https://github.com/MitMaro/server-rsync-backup
	if [[ -z "$C_HIGHLIGHT" ]]; then
		echo "\`$*\`"
	else
		echo "$C_HIGHLIGHT$*$C_RESET"
	fi
}

function message() { # @source: https://github.com/MitMaro/server-rsync-backup
	local message

	message="[$C_LOG_DATE$(date '+%Y/%m/%d %H:%M:%S')$C_RESET] $*"

	#if [[ "${script_config[log_to_file]}" == "true" ]]; then
	#	echo "${message}" >> "${script_config[log_file_path]}"
	#else
	#	echo -e "${message}"
	#fi

	echo -e "$message"
}

function info_message() { # @source: https://github.com/MitMaro/server-rsync-backup
	message "$C_INFO   [INFO]$C_RESET $*"
}

function verbose_message() { # @source: https://github.com/MitMaro/server-rsync-backup
	if $verbose; then
		message "${C_VERBOSE[VERBOSE]}$C_RESET $*"
	fi
}

function warning() { # @source: https://github.com/MitMaro/server-rsync-backup
	message "${C_WARNING[WARNING]}$C_RESET $*"
}

function error() { # @source: https://github.com/MitMaro/server-rsync-backup
	# use error code provided if set, else last commands error code
	local err=${2-$?}

	>&2 message "$C_ERROR  [ERROR]$C_RESET $1"

	if [[ -n $err ]]; then
		exit "$err"
	fi
}

function strip_slash() { # @source: https://github.com/MitMaro/server-rsync-backup
	if [[ "$1" == "/" ]]; then
		echo "$1"
	else
		echo "${1%/}"
	fi
}

function join_by { # @source: https://github.com/MitMaro/server-rsync-backup
	local d="${1-}"
	local f="${2-}"

	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

function array_contains()
{
	local token="$1"; shift

	for element in "$@"; do
		[[ "$token" == "$element" ]] && return 0
	done

	return 1
}

trim_string() # @source: https://jcgoran.github.io/2021/02/07/bash-string-trimming.html
{
    if [[ $# -ne 1 ]]; then
        echo "USAGE: trimstring [STRING]"

        return 1
    fi

    s="${1}"
    size_before=${#s}
    size_after=0

    while (( size_before != size_after )); do
        size_before=${#s}
        s="${s#[[:space:]]}"
        s="${s%[[:space:]]}"
        size_after=${#s}
    done

    echo "$s"

    return 0
}

__current_directory="$(pwd -P)"
export __current_directory

function set_script_path()
{
	local former_directory
	former_directory="$(pwd)"

	local source="${BASH_SOURCE[-1]}"
	while [[ -L "$source" ]]; do # resolve $source until the file is no longer a symlink
		local directory
		directory="$(cd -P "$(dirname -- "$source")" > "/dev/null" 2>&1 && pwd)"
		source="$(readlink -- "$source")"
		[[ "$source" != /* ]] && source="$directory/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done

	__script_path="$(cd -P "$(dirname -- "$source")/../" > "/dev/null" 2>&1 && pwd)"
	cd -- "$former_directory" || exit 1

	export __script_path
}
